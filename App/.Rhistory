etalearn2 ~~ varlearn2*etalearn2
etalearn3 ~~ varlearn3*etalearn3
etalearn4 ~~ varlearn4*etalearn4
# 3. We also want estimates of the intercept factor variances and an
#    estimate of their covariance
iexplor ~~ variexplor*iexplor
ilearn ~~ varilearn*ilearn
iexplor ~~ covi*ilearn
# 4. We have to define that the covariance between the intercepts and
#    the latents of the first time point are zero
etaexplor1 ~~ 0*iexplor
etalearn1 ~~ 0*iexplor
etaexplor1 ~~ 0*ilearn
etalearn1 ~~ 0*ilearn
# 5. Finally, we estimate the covariance between the latents of x and y
#    of the first time point, the second time-point and so on. note that
#    for the second to fourth time point the correlation is constrained to
#    the same value
etaexplor1 ~~ cov1*etalearn1
etaexplor2 ~~ e1*etalearn2
etaexplor3 ~~ e1*etalearn3
etaexplor4 ~~ e1*etalearn4
# The model also contains a mean structure and we have to define some
# constraints for this part of the model. the assumption is that we
# only want estimates of the mean of the intercept factors. all other means
# are defined to be zero:
t1explor ~ 0*1
t2explor ~ 0*1
t3explor ~ 0*1
t4explor ~ 0*1
t1learn ~ 0*1
t2learn ~ 0*1
t3learn ~ 0*1
t4learn ~ 0*1
etaexplor1 ~ 0*1
etaexplor2 ~ 0*1
etaexplor3 ~ 0*1
etaexplor4 ~ 0*1
etalearn1 ~ 0*1
etalearn2 ~ 0*1
etalearn3 ~ 0*1
etalearn4 ~ 0*1
iexplor ~ 1
ilearn ~ 1
## define correlations
cori := covi / (sqrt(variexplor) * sqrt(varilearn))
cor1 := cov1 / (sqrt(varexplor1) * sqrt(varlearn1))
cort2 := e1 / (sqrt(varexplor2) * sqrt(varlearn2))
cort3 := e1 / (sqrt(varexplor3) * sqrt(varlearn3))
cort4 := e1 / (sqrt(varexplor4) * sqrt(varlearn4))
'
fit <- sem(riclpm, data = df_scales, missing = "ML")
summary(fit, fit.measures = T)
clpm <- '
t1vita=~1*t1vita_1+t1vita_2+t1vita_3+t1vita_4+t1vita_5
t2vita=~1*t2vita_1+t2vita_2+t2vita_3+t2vita_4+t2vita_5
t3vita=~1*t3vita_1+t3vita_2+t3vita_3+t3vita_4+t3vita_5
t4vita=~1*t4vita_1+t4vita_2+t4vita_3+t4vita_4+t4vita_5
t1learn=~1*t1learn_1+t1learn_2+t1learn_3+t1learn_4+t1learn_5
t2learn=~1*t2learn_1+t2learn_2+t2learn_3+t2learn_4+t2learn_5
t3learn=~1*t3learn_1+t3learn_2+t3learn_3+t3learn_4+t3learn_5
t4learn=~1*t4learn_1+t4learn_2+t4learn_3+t4learn_4+t4learn_5
# Define phantom latent variables
etat1vita =~ 1*t1vita
etat2vita =~ 1*t2vita
etat3vita =~ 1*t3vita
etat4vita =~ 1*t4vita
etat1learn =~ 1*t1learn
etat2learn =~ 1*t2learn
etat3learn =~ 1*t3learn
etat4learn =~ 1*t4learn
# Autoregressive effects
etat2vita ~ a1*etat1vita
etat3vita ~ a1*etat2vita
etat4vita ~ a1*etat3vita
etat2learn ~ a2*etat1learn
etat3learn ~ a2*etat2learn
etat4learn ~ a2*etat3learn
# Crosslagged effects
etat2learn ~ c1*etat1vita
etat3learn ~ c1*etat2vita
etat4learn ~ c1*etat3vita
etat2vita ~ c2*etat1learn
etat3vita ~ c2*etat2learn
etat4vita ~ c2*etat3learn
# 2. Set the variance of the latent variables, except the first one, to the same value
etat2vita ~~ varx*etat2vita
etat3vita ~~ varx*etat3vita
etat4vita ~~ varx*etat4vita
etat2learn ~~ vary*etat2learn
etat3learn ~~ vary*etat3learn
etat4learn ~~ vary*etat4learn
# 3. Define the variance and the covariance for the first latent variable
etat1vita ~~ vart1vita*etat1vita
etat1learn ~~ vart1learn*etat1learn
# 4. Finally, we estimate the covariance between the latents of x and y
#    of the first time point, the second time-point and so on. note that
#    for the second to fourth time point the correlation is constrained to
#    the same value
etat1vita ~~ cov1*etat1learn
etat2vita ~~ cove*etat2learn
etat3vita ~~ cove*etat3learn
etat4vita ~~ cove*etat4learn
# 5. The model also contains a mean structure and we have to define some
#    constraints for this part of the model. We set the intercepts of the
#    observed indicators to zero and estimate the means of the latent
#    variables:
t1vita ~ 0*1
t2vita ~ 0*1
t3vita ~ 0*1
t4vita ~ 0*1
t1learn ~ 0*1
t2learn ~ 0*1
t3learn ~ 0*1
t4learn ~ 0*1
etat1vita ~ 1
etat2vita ~ 1
etat3vita ~ 1
etat4vita ~ 1
etat1learn ~ 1
etat2learn ~ 1
etat3learn ~ 1
etat4learn ~ 1
## define correlations
cor1 := cov1 / (sqrt(vart1vita) * sqrt(vart1learn))
core := cove / (sqrt(vart1vita) * sqrt(vart1learn))
'
fit <- sem(clpm, data = df_scales, missing = "FIML")
summary(fit, fit.measures = T)
### without random intercept
?indProd
### without random intercept
?indProd
## double mean centering
explor <- df_scales %>% select(matches("t1explor"))
explor
## double mean centering
names(df_scales)
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_1", "t1exploi_3", "t1exploi_4", "t1exploi_5", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = TRUE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL)
## double mean centering
library(semTools)
stargazer
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("mediation", "foreign", "tidyverse","stargazer","multicon", "ggplot2", "plyr", "reshape2", "readxl",
"scales", "grid", "tidyLPA", "Rcpp", "naniar", "dplyr", "car", "mice", "semTools",
"rstudioapi", "labelled", "modi", "semPlot", "kulife")
ipak(packages)
## double mean centering
library(semTools)
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_1", "t1exploi_3", "t1exploi_4", "t1exploi_5", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = TRUE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL)
## double mean centering
library(semTools)
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_1", "t1exploi_3", "t1exploi_4", "t1exploi_5", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL)
names(dmc_df)
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL)
names(dmc_df)
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% select(matches("explor.$exploi"))
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% select(matches("explor.*exploi"))
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% select(matches("explor*.exploi"))
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% select(contains("//."))
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% select(contains("\\."))
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% select(contains("\."))
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% select(contains("\\."))
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% select(contains("\."))
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% select(contains("\."))
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% select(contains("\\."))
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% dplyr::select(contains("\\."))
names(dmc_df)
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% dplyr::select(contains("\."))
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% dplyr::select(contains("\\."))
dmc_df
indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL)
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL)
names(dmc_df)
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% dplyr::select(contains("\\.t"))
names(dmc_df)
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% dplyr::select(contains("\d\\.t"))
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% dplyr::select(contains("\\d\\.t"))
names(dmc_df)
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% dplyr::select(contains("\\."))
names(dmc_df)
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% dplyr::select(contains("exploi"))
names(dmc_df)
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% dplyr::select(contains("."))
names(dmc_df)
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% dplyr::select(contains("."))
names(dmc_df)
dmc_dft1 <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% indProd(df_scales, var1 = c("t2explor_1", "t2explor_2", "t2explor_3"), var2 = c("t2exploi_3", "t2exploi_6", "t2exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% indProd(df_scales, var1 = c("t3explor_1", "t3explor_2", "t3explor_3"), var2 = c("t3exploi_3", "t3exploi_6", "t3exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% indProd(df_scales, var1 = c("t4explor_1", "t4explor_2", "t4explor_3"), var2 = c("t4exploi_3", "t4exploi_6", "t4exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL)
dmc_dft1 <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% indProd(., var1 = c("t2explor_1", "t2explor_2", "t2explor_3"), var2 = c("t2exploi_3", "t2exploi_6", "t2exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% indProd(., var1 = c("t3explor_1", "t3explor_2", "t3explor_3"), var2 = c("t3exploi_3", "t3exploi_6", "t3exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% indProd(., var1 = c("t4explor_1", "t4explor_2", "t4explor_3"), var2 = c("t4exploi_3", "t4exploi_6", "t4exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL)
dmc_dft1 <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% indProd(., var1 = c("t2explor_1", "t2explor_2", "t2explor_3"), var2 = c("t2exploi_3", "t2exploi_6", "t2exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% indProd(., var1 = c("t3explor_1", "t3explor_2", "t3explor_3"), var2 = c("t3exploi_3", "t3exploi_6", "t3exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% indProd(., var1 = c("t4explor_1", "t4explor_2", "t4explor_3"), var2 = c("t4exploi_3", "t4exploi_6", "t4exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% dplyr::select(contains("."))
## Define model for lavaan
names(dmc_df)
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% indProd(., var1 = c("t2explor_1", "t2explor_2", "t2explor_3"), var2 = c("t2exploi_3", "t2exploi_6", "t2exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% indProd(., var1 = c("t3explor_1", "t3explor_2", "t3explor_3"), var2 = c("t3exploi_3", "t3exploi_6", "t3exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% indProd(., var1 = c("t4explor_1", "t4explor_2", "t4explor_3"), var2 = c("t4exploi_3", "t4exploi_6", "t4exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL)
## Define model for lavaan
names(dmc_df)
dmc_df <- indProd(df_scales, var1 = c("t1explor_1", "t1explor_2", "t1explor_3"), var2 = c("t1exploi_3", "t1exploi_6", "t1exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% indProd(., var1 = c("t2explor_1", "t2explor_2", "t2explor_3"), var2 = c("t2exploi_3", "t2exploi_6", "t2exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% indProd(., var1 = c("t3explor_1", "t3explor_2", "t3explor_3"), var2 = c("t3exploi_3", "t3exploi_6", "t3exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% indProd(., var1 = c("t4explor_1", "t4explor_2", "t4explor_3"), var2 = c("t4exploi_3", "t4exploi_6", "t4exploi_7"), var3 = NULL, match = FALSE, meanC = TRUE,
residualC = FALSE, doubleMC = TRUE, namesProd = NULL) %>% dplyr::select(contains("."))
## Define model for lavaan
names(dmc_df)
## Define model for lavaan
lean_dmc <- cbind(dmc_df, df_scales)
clpm <- '
t1explor=~1*t1explor_1.t1exploi_3+t1explor_1.t1exploi_6+t1explor_1.t1exploi_7+t1explor_2.t1exploi_3+t1explor_2.t1exploi_6+t1explor_2.t1exploi_7+t1explor_3.t1exploi_3+t1explor_3.t1exploi_6+t1explor_3.t1exploi_7
t2explor=~1*t2explor_1.t2exploi_3+t2explor_1.t2exploi_6+t2explor_1.t2exploi_7+t2explor_2.t2exploi_3+t2explor_2.t2exploi_6+t2explor_2.t2exploi_7+t2explor_3.t2exploi_3+t2explor_3.t2exploi_6+t2explor_3.t2exploi_7
t3explor=~1*t3explor_1.t3exploi_3+t3explor_1.t3exploi_6+t3explor_1.t3exploi_7+t3explor_2.t3exploi_3+t3explor_2.t3exploi_6+t3explor_2.t3exploi_7+t3explor_3.t3exploi_3+t3explor_3.t3exploi_6+t3explor_3.t3exploi_7
t4explor=~1*t4explor_1.t4exploi_3+t4explor_1.t4exploi_6+t4explor_1.t4exploi_7+t4explor_2.t4exploi_3+t4explor_2.t4exploi_6+t4explor_2.t4exploi_7+t4explor_3.t4exploi_3+t4explor_3.t4exploi_6+t4explor_3.t4exploi_7
t1learn=~1*t1learn_1+t1learn_2+t1learn_3+t1learn_4+t1learn_5
t2learn=~1*t2learn_1+t2learn_2+t2learn_3+t2learn_4+t2learn_5
t3learn=~1*t3learn_1+t3learn_2+t3learn_3+t3learn_4+t3learn_5
t4learn=~1*t4learn_1+t4learn_2+t4learn_3+t4learn_4+t4learn_5
# Define phantom latent variables
etat1explor =~ 1*t1explor
etat2explor =~ 1*t2explor
etat3explor =~ 1*t3explor
etat4explor =~ 1*t4explor
etat1learn =~ 1*t1learn
etat2learn =~ 1*t2learn
etat3learn =~ 1*t3learn
etat4learn =~ 1*t4learn
# Autoregressive effects
etat2explor ~ a1*etat1explor
etat3explor ~ a11*etat2explor
etat4explor ~ a12*etat3explor
etat2learn ~ a2*etat1learn
etat3learn ~ a21*etat2learn
etat4learn ~ a22*etat3learn
# Crosslagged effects
etat2learn ~ c1*etat1explor
etat3learn ~ c11*etat2explor
etat4learn ~ c12*etat3explor
etat2explor ~ c2*etat1learn
etat3explor ~ c21*etat2learn
etat4explor ~ c22*etat3learn
# 2. Set the variance of the latent variables, except the first one, to the same value
etat2explor ~~ varx*etat2explor
etat3explor ~~ varx*etat3explor
etat4explor ~~ varx*etat4explor
etat2learn ~~ vary*etat2learn
etat3learn ~~ vary*etat3learn
etat4learn ~~ vary*etat4learn
# 3. Define the variance and the covariance for the first latent variable
etat1explor ~~ vart1explor*etat1explor
etat1learn ~~ vart1learn*etat1learn
# 4. Finally, we estimate the covariance between the latents of x and y
#    of the first time point, the second time-point and so on. note that
#    for the second to fourth time point the correlation is constrained to
#    the same value
etat1explor ~~ cov1*etat1learn
etat2explor ~~ cove*etat2learn
etat3explor ~~ cove*etat3learn
etat4explor ~~ cove*etat4learn
# 5. The model also contains a mean structure and we have to define some
#    constraints for this part of the model. We set the intercepts of the
#    observed indicators to zero and estimate the means of the latent
#    variables:
t1explor ~ 0*1
t2explor ~ 0*1
t3explor ~ 0*1
t4explor ~ 0*1
t1learn ~ 0*1
t2learn ~ 0*1
t3learn ~ 0*1
t4learn ~ 0*1
etat1explor ~ 1
etat2explor ~ 1
etat3explor ~ 1
etat4explor ~ 1
etat1learn ~ 1
etat2learn ~ 1
etat3learn ~ 1
etat4learn ~ 1
## define correlations
cor1 := cov1 / (sqrt(vart1explor) * sqrt(vart1learn))
core := cove / (sqrt(vart1explor) * sqrt(vart1learn))
'
fit <- sem(clpm, data = df_scales, missing = "FIML")
## Define model for lavaan
learn_dmc <- cbind(dmc_df, df_scales)
fit <- sem(clpm, data = learn_dmc, missing = "FIML")
summary(fit, fit.measures = T)
clpm <- '
t1explor=~1*t1explor_1+t1explor_2+t1explor_3
t2explor=~1*t2explor_1+t2explor_2+t2explor_3
t3explor=~1*t3explor_1+t3explor_2+t3explor_3
t4explor=~1*t4explor_1+t4explor_2+t4explor_3
t1explor_mod=~1*t1explor_1.t1exploi_3+t1explor_1.t1exploi_6+t1explor_1.t1exploi_7+t1explor_2.t1exploi_3+t1explor_2.t1exploi_6+t1explor_2.t1exploi_7+t1explor_3.t1exploi_3+t1explor_3.t1exploi_6+t1explor_3.t1exploi_7
t2explor_mod=~1*t2explor_1.t2exploi_3+t2explor_1.t2exploi_6+t2explor_1.t2exploi_7+t2explor_2.t2exploi_3+t2explor_2.t2exploi_6+t2explor_2.t2exploi_7+t2explor_3.t2exploi_3+t2explor_3.t2exploi_6+t2explor_3.t2exploi_7
t3explor_mod=~1*t3explor_1.t3exploi_3+t3explor_1.t3exploi_6+t3explor_1.t3exploi_7+t3explor_2.t3exploi_3+t3explor_2.t3exploi_6+t3explor_2.t3exploi_7+t3explor_3.t3exploi_3+t3explor_3.t3exploi_6+t3explor_3.t3exploi_7
t4explor_mod=~1*t4explor_1.t4exploi_3+t4explor_1.t4exploi_6+t4explor_1.t4exploi_7+t4explor_2.t4exploi_3+t4explor_2.t4exploi_6+t4explor_2.t4exploi_7+t4explor_3.t4exploi_3+t4explor_3.t4exploi_6+t4explor_3.t4exploi_7
t1learn=~1*t1learn_1+t1learn_2+t1learn_3+t1learn_4+t1learn_5
t2learn=~1*t2learn_1+t2learn_2+t2learn_3+t2learn_4+t2learn_5
t3learn=~1*t3learn_1+t3learn_2+t3learn_3+t3learn_4+t3learn_5
t4learn=~1*t4learn_1+t4learn_2+t4learn_3+t4learn_4+t4learn_5
# Define phantom latent variables
etat1explor =~ 1*t1explor
etat2explor =~ 1*t2explor
etat3explor =~ 1*t3explor
etat4explor =~ 1*t4explor
etat1explor_mod =~ 1*t1explor_mod
etat2explor_mod =~ 1*t2explor_mod
etat3explor_mod =~ 1*t3explor_mod
etat4explor_mod =~ 1*t4explor_mod
etat1learn =~ 1*t1learn
etat2learn =~ 1*t2learn
etat3learn =~ 1*t3learn
etat4learn =~ 1*t4learn
# Autoregressive effects
etat2explor ~ a1*etat1explor
etat3explor ~ a11*etat2explor
etat4explor ~ a12*etat3explor
etat2learn ~ a2*etat1learn
etat3learn ~ a21*etat2learn
etat4learn ~ a22*etat3learn
# Crosslagged effects
etat2learn ~ c1*etat1explor
etat3learn ~ c11*etat2explor
etat4learn ~ c12*etat3explor
etat2learn ~ c1*etat1explor_mod
etat3learn ~ c11*etat2explor_mod
etat4learn ~ c12*etat3explor_mod
etat2explor ~ c2*etat1learn
etat3explor ~ c21*etat2learn
etat4explor ~ c22*etat3learn
# 2. Set the variance of the latent variables, except the first one, to the same value
etat2explor ~~ varx*etat2explor
etat3explor ~~ varx*etat3explor
etat4explor ~~ varx*etat4explor
etat2explor_mod ~~ varx*etat2explor_mod
etat3explor_mod ~~ varx*etat3explor_mod
etat4explor_mod ~~ varx*etat4explor_mod
etat2learn ~~ vary*etat2learn
etat3learn ~~ vary*etat3learn
etat4learn ~~ vary*etat4learn
# 3. Define the variance and the covariance for the first latent variable
etat1explor ~~ vart1explor*etat1explor
etat1explor_mod ~~ vart1explor_mod*etat1explor_mod
etat1learn ~~ vart1learn*etat1learn
# 4. Finally, we estimate the covariance between the latents of x and y
#    of the first time point, the second time-point and so on. note that
#    for the second to fourth time point the correlation is constrained to
#    the same value
etat1explor ~~ cov1*etat1learn
etat2explor ~~ cove*etat2learn
etat3explor ~~ cove*etat3learn
etat4explor ~~ cove*etat4learn
# 5. The model also contains a mean structure and we have to define some
#    constraints for this part of the model. We set the intercepts of the
#    observed indicators to zero and estimate the means of the latent
#    variables:
t1explor ~ 0*1
t2explor ~ 0*1
t3explor ~ 0*1
t4explor ~ 0*1
t1learn ~ 0*1
t2learn ~ 0*1
t3learn ~ 0*1
t4learn ~ 0*1
etat1explor ~ 1
etat2explor ~ 1
etat3explor ~ 1
etat4explor ~ 1
etat1learn ~ 1
etat2learn ~ 1
etat3learn ~ 1
etat4learn ~ 1
## define correlations
cor1 := cov1 / (sqrt(vart1explor) * sqrt(vart1learn))
core := cove / (sqrt(vart1explor) * sqrt(vart1learn))
'
fit <- sem(clpm, data = learn_dmc, missing = "FIML")
summary(fit, fit.measures = T)
clpm <- '
t1explor=~1*t1explor_1+t1explor_2+t1explor_3
t2explor=~1*t2explor_1+t2explor_2+t2explor_3
t3explor=~1*t3explor_1+t3explor_2+t3explor_3
t4explor=~1*t4explor_1+t4explor_2+t4explor_3
t1explor_mod=~1*t1explor_1.t1exploi_3+t1explor_1.t1exploi_6+t1explor_1.t1exploi_7+t1explor_2.t1exploi_3+t1explor_2.t1exploi_6+t1explor_2.t1exploi_7+t1explor_3.t1exploi_3+t1explor_3.t1exploi_6+t1explor_3.t1exploi_7
t2explor_mod=~1*t2explor_1.t2exploi_3+t2explor_1.t2exploi_6+t2explor_1.t2exploi_7+t2explor_2.t2exploi_3+t2explor_2.t2exploi_6+t2explor_2.t2exploi_7+t2explor_3.t2exploi_3+t2explor_3.t2exploi_6+t2explor_3.t2exploi_7
t3explor_mod=~1*t3explor_1.t3exploi_3+t3explor_1.t3exploi_6+t3explor_1.t3exploi_7+t3explor_2.t3exploi_3+t3explor_2.t3exploi_6+t3explor_2.t3exploi_7+t3explor_3.t3exploi_3+t3explor_3.t3exploi_6+t3explor_3.t3exploi_7
t4explor_mod=~1*t4explor_1.t4exploi_3+t4explor_1.t4exploi_6+t4explor_1.t4exploi_7+t4explor_2.t4exploi_3+t4explor_2.t4exploi_6+t4explor_2.t4exploi_7+t4explor_3.t4exploi_3+t4explor_3.t4exploi_6+t4explor_3.t4exploi_7
t1learn=~1*t1learn_1+t1learn_2+t1learn_3+t1learn_4+t1learn_5
t2learn=~1*t2learn_1+t2learn_2+t2learn_3+t2learn_4+t2learn_5
t3learn=~1*t3learn_1+t3learn_2+t3learn_3+t3learn_4+t3learn_5
t4learn=~1*t4learn_1+t4learn_2+t4learn_3+t4learn_4+t4learn_5
# Define phantom latent variables
etat1explor =~ 1*t1explor
etat2explor =~ 1*t2explor
etat3explor =~ 1*t3explor
etat4explor =~ 1*t4explor
etat1explor_mod =~ 1*t1explor_mod
etat2explor_mod =~ 1*t2explor_mod
etat3explor_mod =~ 1*t3explor_mod
etat4explor_mod =~ 1*t4explor_mod
etat1learn =~ 1*t1learn
etat2learn =~ 1*t2learn
etat3learn =~ 1*t3learn
etat4learn =~ 1*t4learn
# Autoregressive effects
etat2explor ~ a1*etat1explor
etat3explor ~ a11*etat2explor
etat4explor ~ a12*etat3explor
etat2learn ~ a2*etat1learn
etat3learn ~ a21*etat2learn
etat4learn ~ a22*etat3learn
# Crosslagged effects
etat2learn ~ c1*etat1explor
etat3learn ~ c11*etat2explor
etat4learn ~ c12*etat3explor
etat2learn ~ c3*etat1explor_mod
etat3learn ~ c31*etat2explor_mod
etat4learn ~ c32*etat3explor_mod
etat2explor ~ c2*etat1learn
etat3explor ~ c21*etat2learn
etat4explor ~ c22*etat3learn
# 2. Set the variance of the latent variables, except the first one, to the same value
etat2explor ~~ varx*etat2explor
etat3explor ~~ varx*etat3explor
etat4explor ~~ varx*etat4explor
etat2explor_mod ~~ varx*etat2explor_mod
etat3explor_mod ~~ varx*etat3explor_mod
etat4explor_mod ~~ varx*etat4explor_mod
etat2learn ~~ vary*etat2learn
etat3learn ~~ vary*etat3learn
etat4learn ~~ vary*etat4learn
# 3. Define the variance and the covariance for the first latent variable
etat1explor ~~ vart1explor*etat1explor
etat1explor_mod ~~ vart1explor_mod*etat1explor_mod
etat1learn ~~ vart1learn*etat1learn
# 4. Finally, we estimate the covariance between the latents of x and y
#    of the first time point, the second time-point and so on. note that
#    for the second to fourth time point the correlation is constrained to
#    the same value
etat1explor ~~ cov1*etat1learn
etat2explor ~~ cove*etat2learn
etat3explor ~~ cove*etat3learn
etat4explor ~~ cove*etat4learn
# 5. The model also contains a mean structure and we have to define some
#    constraints for this part of the model. We set the intercepts of the
#    observed indicators to zero and estimate the means of the latent
#    variables:
t1explor ~ 0*1
t2explor ~ 0*1
t3explor ~ 0*1
t4explor ~ 0*1
t1learn ~ 0*1
t2learn ~ 0*1
t3learn ~ 0*1
t4learn ~ 0*1
etat1explor ~ 1
etat2explor ~ 1
etat3explor ~ 1
etat4explor ~ 1
etat1learn ~ 1
etat2learn ~ 1
etat3learn ~ 1
etat4learn ~ 1
## define correlations
cor1 := cov1 / (sqrt(vart1explor) * sqrt(vart1learn))
core := cove / (sqrt(vart1explor) * sqrt(vart1learn))
'
fit <- sem(clpm, data = learn_dmc, missing = "FIML")
summary(fit, fit.measures = T)
